name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  cleanup:
    runs-on: ubuntu-latest  
    steps:
      - name: Clean Up
        run: |
          cd ~/ferari_finel/web_project
          docker rmi -f yotamdavid/app_ferari:latest

  build:
    runs-on: ubuntu-latest
    needs: cleanup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          cd ~/web_project/
          docker build -t yotamdavid/app_ferari:1.${{ github.run_number }} -t yotamdavid/app_ferari:latest .
          docker push yotamdavid/app_ferari:1.${{ github.run_number }}
          docker push yotamdavid/app_ferari:latest
          docker image ls --format '{{.ID}}' yotamdavid/app_ferari --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}

  create_test_cluster:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create a Cluster
        run: |
          cd ~/ferari_finel
          terraform init
          terraform apply -auto-approve

  testing:
    runs-on: ubuntu-latest
    needs: create_test_cluster
    steps:
      - name: Run k8s on Test Server
        run: |
          gcloud container clusters get-credentials test-cluster --project golden-system-393111 --region us-central1
          cd ~/k8s_project
          kubectl apply -f db-deploy.yml
          kubectl apply -f db-service.yml
          kubectl apply -f app_deployment.yaml
          kubectl apply -f app_service.yaml 
          chmod +x update_db.sh
          ./update_db.sh
          chmod +x test.sh
          ./test.sh
          kubectl delete pods --all
          kubectl delete services --all
          kubectl delete deployments --all

  destroy_test_server:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Destroy Test Server
        run: |
          cd ~/ferari_finel
          terraform init
          terraform destroy -auto-approve

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: destroy_test_server
    steps:
      - name: Run k8s on Prod Server
        run: |
          gcloud container clusters get-credentials ferari-web2 --project golden-system-393111 --region us-east1-b
          cd ~/k8s_project
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
          kubectl apply -f argocd_app.yaml
          chmod +x update_db.sh
          ./update_db.sh

  monitor:
    runs-on: ubuntu-latest
    needs: deploy_to_prod
    steps:
      - name: Set Up Monitoring
        run: |
          gcloud container clusters get-credentials ferari-web2 --project golden-system-393111 --region us-east1-b
          kubectl create namespace monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring
          nohup kubectl port-forward svc/prometheus-kube-prometheus-prometheus -n monitoring 9090 &
          echo "now edit the grafana service from ClusterIP to LoadBalancer"
          echo "The monitor has been set up successfully"
